version: "3.9"

networks:
  judge_net:

volumes:
  pgdata:
  certbot-etc:
  certbot-var:

services:
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: >
      certonly --webroot -w /var/www/certbot --keep-until-expiring --email ${EMAIL} -d ${DOMAIN} --agree-tos 

    networks: [judge_net]

  # ───────────────────── BACKEND ─────────────────────
  backend:
    image: ${DOCKERHUB}/oj-backend:latest
    container_name: backend
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_SECRET: ${JWT_SECRET}
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:              { condition: service_healthy }
      redis:           { condition: service_healthy }
      worker:          { condition: service_started   }
    volumes:
      - .:/app:z
      - /app/node_modules
    working_dir: /app
    command: node server.js     # production command
    networks: [judge_net]

  # ───────────────────── DATABASE ────────────────────
  db:
    image: postgres:14-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [judge_net]

  # ───────────────────── REDIS ───────────────────────
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [judge_net]

  # ─────────────────── CELERY WORKER ─────────────────
  worker:
    image: ${DOCKERHUB}/oj-worker:latest
    healthcheck:
      test : ["CMD", "celery -A workers.tasks status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    depends_on: { redis: { condition: service_healthy } }
    volumes:
      - ./workers:/app/workers:z
      - ./problems:/app/problems:z
      - ./submissions:/app/submissions:z
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    command: >
      celery -A workers.tasks worker
            --loglevel=${LOG_LEVEL:-info}
            --concurrency=3
            --queues=submitQueue,runQueue,runSystemQueue

    environment:
      BASE_DIR: ${BASE_DIR}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BACKEND_HOST: backend
      BACKEND_PORT: 5000
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    networks: [judge_net]


  # ───────────────────── NGINX ───────────────────────
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks: [judge_net]

  # ────────────────── CELERY API ──────────────────
  celery_api:
    image: ${DOCKERHUB}/oj-worker:latest
    container_name: celery-api
    restart: always
    command: python api_server.py
    depends_on:
      - redis
    networks: [judge_net]

# ─────────────────────────────────────────────────────
