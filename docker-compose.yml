version: '3.8'

services:
  backend:
    build: .
    container_name: online-judge-backend
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_SECRET: ${JWT_SECRET}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      - db
      - redis
      - celery_worker
      - celery_beat
    volumes:
      - .:/app:z
      - /app/node_modules
    working_dir: /app
    command: npx nodemon server.js

  db:
    image: postgres:14-alpine
    container_name: online-judge-db
    restart: always
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: online-judge-redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery_worker:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: online-judge-celery-worker
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./workers:/app/workers:z
    working_dir: /app
    command: celery -A workers.tasks worker --loglevel=${LOG_LEVEL} --concurrency=${WORKER_CONCURRENCY}
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  
  celery_beat:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: online-judge-celery-beat
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./workers:/app/workers:z
    working_dir: /app
    command: celery -A workers.tasks beat --loglevel=${LOG_LEVEL}
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

volumes:
  pgdata: